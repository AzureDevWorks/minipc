Of course, here is the GitHub-ready Markdown for installing SQL Server on Ubuntu 24.04. You can copy and paste the content from the code block below directly into a `.md` file on GitHub.

````markdown
# 🚀 Installing Microsoft SQL Server 2022 on Ubuntu 24.04 (Noble)

Ubuntu 24.04 “Noble” is not yet officially supported by Microsoft for SQL Server 2022. However, you can use the Ubuntu 22.04 packages as a reliable workaround. This guide will walk you through installing **SQL Server Developer Edition** on your machine and configuring it for local network access.

---

## Prerequisites

* Ubuntu 24.04 running on your machine.
* SSH access to your machine.
* A user account with `sudo` privileges.

---

## Step 1: Clean Up Old GPG Keys (Optional)

To prevent potential conflicts, it's a good practice to remove any old Microsoft GPG keys if they exist.

```bash
sudo rm -f /usr/share/keyrings/microsoft.gpg
sudo rm -f /usr/share/keyrings/msprod.gpg
````

-----

## Step 2: Import the Microsoft GPG Key

Add the official Microsoft package signing key to ensure the authenticity of the packages you're about to install.

```bash
sudo curl [https://packages.microsoft.com/keys/microsoft.asc](https://packages.microsoft.com/keys/microsoft.asc) | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
```

-----

## Step 3: Add the SQL Server 2022 Repository

Since Ubuntu 24.04 isn't officially supported, we'll configure `apt` to use the repository for Ubuntu 22.04.

```bash
sudo curl -fsSL [https://packages.microsoft.com/config/ubuntu/22.04/mssql-server-2022.list](https://packages.microsoft.com/config/ubuntu/22.04/mssql-server-2022.list) | sudo tee /etc/apt/sources.list.d/mssql-server-2022.list
sudo apt update
```

-----

## Step 4: Install SQL Server

Now, you can install the `mssql-server` package.

```bash
sudo apt install -y mssql-server
```

-----

## Step 5: Configure SQL Server

Run the configuration script to set up your SQL Server instance.

```bash
sudo /opt/mssql/bin/mssql-conf setup
```

You will be prompted to:

1.  Accept the license terms.
2.  Choose an edition. Select **Developer Edition** (it's free).
3.  Set a strong password for the `SA` (System Administrator) user.

-----

## Step 6: Verify the SQL Server Service

Check if the SQL Server service is active and running correctly.

```bash
systemctl status mssql-server
```

You should see an `active (running)` status in the output.

-----

## Step 7: Install SQL Server Command-Line Tools

Install `mssql-tools` to get command-line utilities like `sqlcmd` and `bcp`.

```bash
sudo apt install -y mssql-tools unixodbc-dev
```

Next, add the tools to your shell's `PATH` to make them easily accessible.

```bash
echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
source ~/.bashrc
```

-----

## Step 8: Test the Connection Locally

Use `sqlcmd` to connect to your local SQL Server instance and verify that everything is working.

```bash
sqlcmd -S localhost -U SA -P 'YourStrong!Passw0rd'
```

If the connection is successful, you'll see a `1>` prompt, ready for your SQL queries. Type `QUIT` to exit.

-----

## Step 9: Allow Remote Connections (Firewall)

To connect from other machines on your network, you need to open the default SQL Server port (1433) in the firewall.

```bash
sudo ufw allow 1433/tcp
sudo ufw reload
```

You can verify that the service is listening on the port with `netstat`.

```bash
sudo netstat -tulnp | grep 1433
```

-----

## Step 10: Connect from a Remote Machine

You can now connect to your SQL Server instance from another computer using tools like **Azure Data Studio** or **SQL Server Management Studio (SSMS)**.

  * **Server:** Your Ubuntu machine's IP address (e.g., `192.168.50.2`)
  * **Authentication:** SQL Server Authentication
  * **Login:** `SA`
  * **Password:** The password you configured in Step 5.

Alternatively, you can connect using `sqlcmd` from a Windows machine with SQL Server tools installed:

```powershell
sqlcmd -S 192.168.50.2 -U SA -P 'YourStrong!Passw0rd'
```

-----

## Troubleshooting Tips

  * **Missing Dependencies:** If you encounter errors about missing packages like `libldap-common`, you can install them manually:
    ```bash
    sudo apt install libldap-common
    ```
  * **Service Fails to Start:** If the `mssql-server` service doesn't start, check the system journal for detailed error messages:
    ```bash
    sudo journalctl -u mssql-server
    ```

-----

## ✅ Conclusion

You now have a fully functional **Microsoft SQL Server Developer Edition running on Ubuntu 24.04**. This setup is perfect for development, testing, and local database management, providing a powerful database solution on a modern Linux distribution.

```
```
